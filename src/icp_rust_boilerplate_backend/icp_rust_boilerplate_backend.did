type Certificate = record {
  id : nat64;
  user_id : nat64;
  course_id : nat64;
  issue_date : nat64;
};
type Course = record {
  id : nat64;
  title : text;
  updated_at : opt nat64;
  description : text;
  created_at : nat64;
  lessons : vec nat64;
  creator_principal : text;
};
type CoursePayload = record { title : text; description : text };
type Error = variant {
  InputValidationFailed : record { msg : text };
  NotFound : record { msg : text };
  NotCreator;
};
type Lesson = record {
  id : nat64;
  title : text;
  updated_at : opt nat64;
  content : text;
  created_at : nat64;
  course_id : nat64;
};
type LessonPayload = record { title : text; content : text };
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : Certificate; Err : Error };
type Result_2 = variant { Ok : Course; Err : Error };
type Result_3 = variant { Ok : Lesson; Err : Error };
type Result_4 = variant { Ok : User; Err : Error };
type Result_5 = variant { Ok : bool; Err : Error };
type User = record { id : nat64; username : text; public_key : text };
service : {
  add_course : (CoursePayload) -> (opt Course);
  add_lesson : (LessonPayload, nat64) -> (Result);
  delete_course : (nat64) -> (Result);
  delete_lesson : (nat64) -> (Result);
  delete_user : (nat64) -> (Result);
  get_certificate : (nat64) -> (Result_1) query;
  get_course : (nat64) -> (Result_2) query;
  get_lesson : (nat64) -> (Result_3) query;
  get_user : (nat64) -> (Result_4) query;
  issue_certificate : (nat64, nat64) -> (Result_1);
  register_user : (text, text) -> (Result_4);
  update_course : (nat64, CoursePayload) -> (Result_2);
  update_lesson : (nat64, LessonPayload) -> (Result_3);
  verify_certificate : (nat64, nat64) -> (Result_5) query;
}
